name: Test Numerade Video Viewer
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm init -y
        npm install puppeteer@latest http-server
    
    - name: Create test script
      run: |
        cat << 'EOT' > test.js
        const puppeteer = require('puppeteer');
        const assert = require('assert');
        const path = require('path');
        const fs = require('fs');

        const urls = [
          'https://www.numerade.com/ask/question/a-gas-mixture-is-made-from-156-g-of-bromine-gas-and-138-g-of-chlorine-gas-the-total-pressure-of-the-mixture-is-0632-atm-what-is-the-partial-pressure-of-the-bromine-gas/',
          'https://www.numerade.com/questions/select-the-correct-alternative-from-the-given-choices-a-100-mathrmkm-long-cable-runs-at-1536-mathrmm/',
          'https://www.numerade.com/questions/indicate-whether-each-of-the-following-nuclides-lies-within-the-belt-of-stability-in-figure-212-a-ne/'
        ];

        let passingTests = 0;
        let failedTests = 0;
        let errors = [];

        async function testUrl(url) {
          const browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
            defaultViewport: null,
            timeout: 60000
          });
          const page = await browser.newPage();
          
          try {
            await page.goto('http://localhost:8080', { waitUntil: 'networkidle0', timeout: 60000 });
            
            await page.type('#urlInput', 'https://invalid-url.com', { timeout: 30000 });
            await Promise.all([
              page.click('.submit-btn', { timeout: 30000 }),
              page.waitForFunction(() => {
                return new Promise(resolve => {
                  window.alert = msg => {
                    window.lastAlertMessage = msg;
                    resolve();
                  };
                });
              }, { timeout: 30000 })
            ]);
            
            const alertText = await page.evaluate(() => window.lastAlertMessage);
            assert(alertText && alertText.includes('Invalid link'), 'Input validation failed');

            await page.$eval('#urlInput', el => el.value = '');
            await page.type('#urlInput', url, { timeout: 30000 });
            await page.click('.submit-btn', { timeout: 30000 });
            
            await Promise.race([
              page.waitForSelector('#videoOutput[src]', { visible: true, timeout: 60000 }),
              page.waitForSelector('#overlay:not([style*="display: none"])', { visible: true, timeout: 60000 })
            ]);
            
            const videoSrc = await page.$eval('#videoOutput', el => el.src);
            const overlayVisible = await page.$eval('#overlay', el => window.getComputedStyle(el).display !== 'none');
            
            if (overlayVisible) {
              throw new Error('Video failed to load (overlay still visible)');
            }
            
            assert(videoSrc, `Video source not found for ${url}`);
            assert(videoSrc.startsWith('https://cdn.numerade.com/'), `Invalid video source for ${url}: ${videoSrc}`);
            
            const consoleErrors = await page.evaluate(() => {
              return window.consoleErrors || [];
            });
            assert(consoleErrors.length === 0, `Console errors detected: ${consoleErrors.join(', ')}`);
            
            console.log(`Test passed for ${url}`);
            passingTests++;
          } catch (error) {
            console.error(`Test failed for ${url}: ${error.message}`);
            errors.push(`${url}: ${error.message}`);
            failedTests++;
          } finally {
            await browser.close();
          }
        }

        (async () => {
          for (const url of urls) {
            await testUrl(url);
          }
          console.log(`${passingTests} out of ${urls.length} tests passed successfully!`);
          console.log(`${failedTests} tests failed.`);
          if (errors.length > 0) {
            console.log('Errors encountered:');
            errors.forEach(error => console.log(error));
          }
          fs.writeFileSync('test-results.txt', `${passingTests},${failedTests}`);
          fs.writeFileSync('test-errors.txt', errors.join('\n'));
        })();
        EOT
    
    - name: Modify index.html for testing
      run: |
        sed -i 's|</head>|<script>window.consoleErrors = []; console.error = function() { window.consoleErrors.push(Array.from(arguments).join(" ")); };</script></head>|' index.html
    
    - name: Start HTTP server
      run: npx http-server . &
    
    - name: Run tests
      run: node test.js
    
    - name: Update README
      run: |
        current_date=$(date +'%Y-%m-%d')
        passing_tests=$(cut -d',' -f1 test-results.txt)
        failed_tests=$(cut -d',' -f2 test-results.txt)
        total_tests=$((passing_tests + failed_tests))
        
        sed -i '/^## Test Results/,$d' README.md
        
        cat << EOF >> README.md

        ## Test Results
        
        | 📊 Status | 🔢 Count |
        |-----------|----------|
        | ✅ Passing | $passing_tests |
        | ❌ Failed | $failed_tests |
        | 🔬 Total | $total_tests |
        
        🕒 Last Tested: $current_date
        EOF
        
        if [ -s test-errors.txt ]; then
          echo "" >> README.md
          echo "### Errors" >> README.md
          echo "\`\`\`" >> README.md
          cat test-errors.txt >> README.md
          echo "\`\`\`" >> README.md
        fi
    
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update test results and date" || echo "No changes to commit"
        git push
    
    - name: Check for push failures
      run: |
        if [[ $(git push 2>&1) == *"error"* ]]; then
          echo "::error::Failed to push changes. Please ensure the workflow has write permissions."
          exit 1
        fi
    
    - name: Check for test failures
      if: ${{ failure() }}
      run: |
        echo "::error::Tests failed. Check the logs for more details."
        exit 1