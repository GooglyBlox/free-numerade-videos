name: Test Numerade Video Viewer
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    - name: Install dependencies
      run: |
        npm init -y
        npm install puppeteer@19.11.1
    - name: Create test script
      run: |
        cat << 'EOT' > test.js
        const puppeteer = require('puppeteer');
        const assert = require('assert');
        const path = require('path');
        const fs = require('fs');
        const urls = [
          'https://www.numerade.com/ask/question/a-gas-mixture-is-made-from-156-g-of-bromine-gas-and-138-g-of-chlorine-gas-the-total-pressure-of-the-mixture-is-0632-atm-what-is-the-partial-pressure-of-the-bromine-gas/',
          'https://www.numerade.com/questions/select-the-correct-alternative-from-the-given-choices-a-100-mathrmkm-long-cable-runs-at-1536-mathrmm/',
          'https://www.numerade.com/questions/indicate-whether-each-of-the-following-nuclides-lies-within-the-belt-of-stability-in-figure-212-a-ne/'
        ];
        let passingTests = 0;
        async function testUrl(url) {
          const browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          const page = await browser.newPage();
          
          try {
            await page.goto('file://' + path.resolve('index.html'), { waitUntil: 'networkidle0' });
            
            await page.type('#urlInput', url);
            await page.click('.submit-btn');
            
            await page.waitForSelector('#videoOutput[src]', { timeout: 60000 });
            
            const videoSrc = await page.$eval('#videoOutput', el => el.src);
            
            assert(videoSrc, `Video source not found for ${url}`);
            assert(videoSrc.startsWith('https://cdn.numerade.com/'), `Invalid video source for ${url}: ${videoSrc}`);
            
            console.log(`Test passed for ${url}`);
            passingTests++;
          } catch (error) {
            console.error(`Test failed for ${url}: ${error.message}`);
          } finally {
            await browser.close();
          }
        }
        (async () => {
          for (const url of urls) {
            await testUrl(url);
          }
          console.log(`${passingTests} out of ${urls.length} tests passed successfully!`);
          fs.writeFileSync('test-results.txt', `${passingTests}`);
        })();
        EOT
    - name: Display test script content
      run: cat test.js
    - name: Run tests
      run: node test.js
    - name: Update README
      run: |
        current_date=$(date +'%Y-%m-%d')
        sed -i '/!\[Tests Passing\]/d' README.md
        sed -i '/!\[Last Tested\]/d' README.md
        sed -i '1i\![Last Tested](https://img.shields.io/badge/Last%20Tested-'"${current_date}"'-blue)' README.md
        sed -i '1i\![Tests Passing](https://img.shields.io/badge/Tests%20Passing-'$(cat test-results.txt)'-brightgreen)' README.md
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update test results and date badges" || echo "No changes to commit"
        git push
